# Generated by Django 4.2.21 on 2025-05-31 17:28

import ckeditor_uploader.fields
import cloudinary.models
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import taggit.managers
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('taggit', '0006_rename_taggeditem_content_type_object_id_taggit_tagg_content_8fc721_idx'),
    ]

    operations = [
        migrations.CreateModel(
            name='Artwork',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('slug', models.SlugField(blank=True, max_length=255, unique=True)),
                ('primary_image', cloudinary.models.CloudinaryField(max_length=255, verbose_name='artwork_primary_image')),
                ('description', models.TextField(blank=True)),
                ('date_uploaded', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ['-date_uploaded'],
            },
        ),
        migrations.CreateModel(
            name='GalleryCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the art category.', max_length=100, unique=True)),
                ('slug', models.SlugField(blank=True, help_text='Unique URL-friendly version of the name.', max_length=100, unique=True)),
                ('representative_image', cloudinary.models.CloudinaryField(blank=True, max_length=255, null=True, verbose_name='gallery_category_representative_image')),
            ],
            options={
                'verbose_name_plural': 'Gallery Categories',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='HeroSlide',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='Title for the slide (shown on overlay).', max_length=100)),
                ('image', cloudinary.models.CloudinaryField(help_text='Image for the hero slide.', max_length=255, verbose_name='hero_slide_image')),
                ('link_url', models.URLField(blank=True, help_text='Optional URL this slide links to.', max_length=255, null=True)),
                ('order', models.PositiveIntegerField(default=0, help_text='Order of display.')),
                ('is_active', models.BooleanField(default=True, help_text='Display this slide?')),
            ],
            options={
                'verbose_name': 'Hero Slide',
                'verbose_name_plural': 'Hero Slides',
                'ordering': ['order'],
            },
        ),
        migrations.CreateModel(
            name='SocialLink',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('platform_name', models.CharField(choices=[('facebook', 'Facebook'), ('instagram', 'Instagram'), ('twitter', 'Twitter/X'), ('pinterest', 'Pinterest'), ('linkedin', 'LinkedIn'), ('other', 'Other')], default='other', max_length=50)),
                ('url', models.URLField(help_text='Full URL to your social media profile page')),
                ('icon_svg_or_class', models.CharField(blank=True, help_text='Optional: SVG code for icon, or a CSS class name if using an icon font', max_length=100)),
                ('is_active', models.BooleanField(default=True, help_text='Display this link on the site?')),
                ('order', models.PositiveIntegerField(default=0, help_text='Order of display (e.g., 0 first, 1 second)')),
            ],
            options={
                'ordering': ['order'],
            },
        ),
        migrations.CreateModel(
            name='Subscriber',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email', models.EmailField(help_text='Email address of the subscriber.', max_length=254, unique=True)),
                ('is_active', models.BooleanField(default=False, help_text='True if the subscription is confirmed (double opt-in complete).')),
                ('confirmation_token', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Token for email confirmation.', unique=True)),
                ('unsubscribe_token', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Token for unsubscribing.', unique=True)),
                ('subscribed_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Blog Subscriber',
                'verbose_name_plural': 'Blog Subscribers',
                'ordering': ['-subscribed_at'],
            },
        ),
        migrations.CreateModel(
            name='InstagramImportedItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('instagram_post_id', models.CharField(help_text='The unique ID of the Instagram post or media item.', max_length=255, unique=True)),
                ('image_url_from_instagram', models.URLField(help_text='URL of the image directly from Instagram CDN.', max_length=1024)),
                ('caption_from_instagram', models.TextField(blank=True, help_text='The original caption from the Instagram post.')),
                ('imported_at', models.DateTimeField(auto_now_add=True)),
                ('status', models.CharField(choices=[('pending_review', 'Pending Review'), ('processed', 'Processed into Artwork'), ('ignored', 'Ignored')], default='pending_review', max_length=50)),
                ('created_artwork', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='source_instagram_item', to='core.artwork')),
            ],
            options={
                'verbose_name': 'Instagram Imported Item',
                'verbose_name_plural': 'Instagram Imported Items',
                'ordering': ['-imported_at'],
            },
        ),
        migrations.CreateModel(
            name='FeaturedHomepageArtwork',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order', models.PositiveIntegerField(default=0, help_text='Order of display (1, 2, 3).')),
                ('is_active', models.BooleanField(default=True, help_text='Display this featured artwork?')),
                ('artwork', models.ForeignKey(help_text='Select an artwork to feature on the homepage.', on_delete=django.db.models.deletion.CASCADE, to='core.artwork')),
            ],
            options={
                'verbose_name': 'Homepage Featured Artwork',
                'verbose_name_plural': 'Homepage Featured Artworks',
                'ordering': ['order'],
            },
        ),
        migrations.CreateModel(
            name='BlogPost',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='The title of your blog post.', max_length=200)),
                ('slug', models.SlugField(blank=True, help_text='Unique URL-friendly version of the title (leave blank to auto-generate).', max_length=255, unique=True)),
                ('cover_image', cloudinary.models.CloudinaryField(blank=True, help_text='Optional: A cover image for the blog post.', max_length=255, null=True, verbose_name='blog_cover_image')),
                ('content', ckeditor_uploader.fields.RichTextUploadingField(help_text='Write your blog content here. You can format text and embed images.')),
                ('summary', models.TextField(help_text='A short summary/excerpt for blog listing pages.', max_length=500)),
                ('publish_date', models.DateTimeField(auto_now_add=True, help_text='The date and time this post was published.')),
                ('author', models.ForeignKey(editable=False, help_text='The author of the post (automatically set).', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('tags', taggit.managers.TaggableManager(blank=True, help_text='Comma-separated list of tags. Artist can create new tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Blog Tags')),
            ],
            options={
                'verbose_name': 'Blog Post',
                'verbose_name_plural': 'Blog Posts',
                'ordering': ['-publish_date'],
            },
        ),
        migrations.AddField(
            model_name='artwork',
            name='category',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='artworks', to='core.gallerycategory'),
        ),
        migrations.AddField(
            model_name='artwork',
            name='tags',
            field=taggit.managers.TaggableManager(blank=True, help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Artwork Tags'),
        ),
        migrations.CreateModel(
            name='AdditionalArtworkImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', cloudinary.models.CloudinaryField(max_length=255, verbose_name='artwork_additional_image')),
                ('caption', models.CharField(blank=True, max_length=255, null=True)),
                ('order', models.PositiveIntegerField(default=0)),
                ('artwork', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='additional_images', to='core.artwork')),
            ],
            options={
                'ordering': ['order'],
            },
        ),
    ]
